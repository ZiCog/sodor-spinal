
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_NANO(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	// input 		     [3:0]		SW,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N

	//////////// EPCS //////////
	// output		          		EPCS_ASDO,
	// input 		          		EPCS_DATA0,
	// output		          		EPCS_DCLK,
	// output		          		EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	// output		          		G_SENSOR_CS_N,
	// input 		          		G_SENSOR_INT,
	// output		          		I2C_SCLK,
	// inout 		          		I2C_SDAT,

	//////////// ADC //////////
	// output		          		ADC_CS_N,
	// output		          		ADC_SADDR,
	// output		          		ADC_SCLK,
	// input 		          		ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	// inout 		    [12:0]		GPIO_2,
	// input 		     [2:0]		GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	// inout 		    [33:0]		GPIO_0,
	// input 		     [1:0]		GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	// inout 		    [33:0]		GPIO_1,
	// input 		     [1:0]		GPIO_1_IN
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire        rst_n;
wire        CLOCK_100;

wire [23:0] wr_addr;
wire [15:0] wr_data;
wire        wr_enable;

wire [23:0] rd_addr;
wire [15:0] rd_data;
wire        rd_enable;
wire        rd_ready;

wire        busy;


//=======================================================
//  Structural coding
//=======================================================


assign DRAM_CLK = CLOCK_100;

sdram_controller sdram_controller_i (
	 .rst_n(rst_n),
	 .clk(CLOCK_100),


    /* HOST INTERFACE */
    .wr_addr(wr_addr), 
    .wr_data(wr_data),
	 .wr_enable(wr_enable),
    .rd_addr(rd_addr), 
    .rd_data(rd_data),
    .rd_ready(rd_ready),
	 .rd_enable(rd_enable),
    .busy(busy),

    /* SDRAM SIDE */
    .addr(DRAM_ADDR),
	 .bank_addr(DRAM_BA),
	 .data(DRAM_DQ),
	 .clock_enable(DRAM_CKE),
	 .cs_n(DRAM_CS_N),
	 .ras_n(DRAM_RAS_N),
	 .cas_n(DRAM_CAS_N),
	 .we_n(DRAM_WE_N),
	 .data_mask_low(DRAM_DQM[0]),
	 .data_mask_high(DRAM_DQM[1])
);


sdram_controller_tb sdram_controller_tb_i (
      .CLOCK_50(CLOCK_50),
      .CLOCK_100(CLOCK_100),
      .rst_n(rst_n),
		
      .LED(LED),
      .KEY(KEY),
		
      .sdram_wr_addr(wr_addr),
      .sdram_wr_data(wr_data),
      .sdram_wr_enable(wr_enable),

      .sdram_rd_addr(rd_addr),
      .sdram_rd_data(rd_data),
      .sdram_rd_enable(rd_enable),
      .sdram_rd_ready(rd_ready),

      .sdram_busy(busy)
);


endmodule
